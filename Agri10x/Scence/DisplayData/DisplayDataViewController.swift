//
//  DisplayDataViewController.swift
//  Agri10x
//
//  Created by Akash Kumar on 06/10/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DisplayDataDisplayLogic: class
{
  func displaySomething(viewModel: DisplayData.Something.ViewModel)
    func didReceiveDetailsResponse(response:[UserDetails]?)
}

class DisplayDataViewController: UIViewController, DisplayDataDisplayLogic
{
    var stackContainer : SwipeStackView!
    var userDetailsViewModel:[UserDetails] = []
    var interactor: DisplayDataBusinessLogic?
  var router: (NSObjectProtocol & DisplayDataRoutingLogic & DisplayDataDataPassing)?

//    @IBAction func getDataBtnTapped(_ sender: Any) {
//        let userObject = DatabaseHelper.sharedInstance.getUserData()
//        self.userData = userObject
//    }
    // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = DisplayDataInteractor()
    let presenter = DisplayDataPresenter()
    let router = DisplayDataRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
    override func loadView() {
           view = UIView()
           view.backgroundColor = UIColor(red:0.93, green:0.93, blue:0.93, alpha:1.0)
           stackContainer = SwipeStackView()
           view.addSubview(stackContainer)
           configureStackContainer()
           stackContainer.translatesAutoresizingMaskIntoConstraints = false
       }
    func configureStackContainer() {
         stackContainer.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
         stackContainer.centerYAnchor.constraint(equalTo: view.centerYAnchor, constant: -60).isActive = true
         stackContainer.widthAnchor.constraint(equalToConstant: 300).isActive = true
         stackContainer.heightAnchor.constraint(equalToConstant: 400).isActive = true
     }
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
    setupRefreshButton()
    setUpfavBarButton()
    let urlString = URLConfig.getURLString(forKey: "WebServiceURL")
    interactor?.callDetailsApi(urlString: urlString)
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = DisplayData.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: DisplayData.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
    func didReceiveDetailsResponse(response:[UserDetails]?) {
        if let data = response, data.count > 0 {
            self.userDetailsViewModel = data
            DispatchQueue.main.async {
                self.stackContainer.dataSource = self
            }
//            var dictArr : [[String:Any]] = []
//            for i in data {
//                let dict = ["id":i.id ?? 0,"category":i.category ?? "","description":i.description ?? "","image":i.image ?? "","price":i.price ?? 0.0,"rate":i.rating?.rate ?? 0.0,"count":i.rating?.count ?? 0] as [String : Any]
//                dictArr.append(dict)
//            }
//            DispatchQueue.main.async {                DatabaseHelper.sharedInstance.saveData(obj: dictArr as [[String : AnyObject]])
//                let userObject = DatabaseHelper.sharedInstance.getUserData()
//                self.userData = userObject
//            }
        }
    }
    
    func setupRefreshButton() {
        let refreshBtn = UIButton(type: .custom)
        refreshBtn.frame = CGRect(x: 0.0, y: 0.0, width: 40, height: 40)
        refreshBtn.setImage(UIImage(named:"refresh"), for: .normal)
        refreshBtn.addTarget(self, action: #selector(refreshButtonPressed), for: UIControl.Event.touchUpInside)
        
        let refreshBtnBarItem = UIBarButtonItem(customView: refreshBtn)
        let currWidth = refreshBtnBarItem.customView?.widthAnchor.constraint(equalToConstant: 24)
        currWidth?.isActive = true
        let currHeight = refreshBtnBarItem.customView?.heightAnchor.constraint(equalToConstant: 24)
        currHeight?.isActive = true
        self.navigationItem.leftBarButtonItem = refreshBtnBarItem
    }
    
    @objc func refreshButtonPressed() {
        let urlString = URLConfig.getURLString(forKey: "WebServiceURL")
        interactor?.callDetailsApi(urlString: urlString)
    }
    
    func setUpfavBarButton() {
        let favBtn = UIButton(type: .custom)
        favBtn.frame = CGRect(x: 0.0, y: 0.0, width: 40, height: 40)
        favBtn.setImage(UIImage(named:"like"), for: .normal)
        favBtn.addTarget(self, action: #selector(showFavourite), for: UIControl.Event.touchUpInside)

        let favBarItem = UIBarButtonItem(customView: favBtn)
        let currWidth = favBarItem.customView?.widthAnchor.constraint(equalToConstant: 24)
        currWidth?.isActive = true
        let currHeight = favBarItem.customView?.heightAnchor.constraint(equalToConstant: 24)
        currHeight?.isActive = true
        self.navigationItem.rightBarButtonItem = favBarItem
    }
    
    @objc func showFavourite() {
         let userObject = DatabaseHelper.sharedInstance.getUserData()
        if userObject.count > 0 {
            if let vc = FavouriteViewController.instance() {
            vc.userData = userObject
         self.navigationController?.pushViewController(vc, animated: false)
        }
        }
        else{
            let alert = UIAlertController(title: "Warning", message: "You dont have any favourite. Swipe right to add to your favourite", preferredStyle: .alert) // 1
            let firstAction = UIAlertAction(title: "OK", style: .default) { (alert: UIAlertAction!) -> Void in
                NSLog("You pressed button one")
            }
            alert.addAction(firstAction)
            present(alert, animated: true, completion:nil)
        }
    }
}

extension DisplayDataViewController : SwipeCardsDataSource {

    func numberOfCardsToShow() -> Int {
        return userDetailsViewModel.count
    }
    
    func card(at index: Int) -> SwipesView {
        let card = SwipesView.loadNib(from: self)
        card.dataSource = userDetailsViewModel[index]
        return card
    }
    
    func emptyView() -> UIView? {
        return nil
    }
    

}
